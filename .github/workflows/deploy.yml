env: 
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: woojoo-github-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: woojoo-springboot2-webservice
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: woojoo-springboot2-webservice-group
  PROJECT_NAME: bookproject-springboot2-webservice

name: deploy # (0) GitHub Action에서 보여질 이름을 지정합니다. 

on:
  release:
    types: [push] # (1) push시 자동으로 실행됩니다.
  push:
    branches: [main] # (2) main 브랜치에서 동작합니다.
  workflow_dispatch: # (3) 수동으로도 실행이 가능합니다.


jobs:
  build: 
    runs-on: ubuntu-latest # (4) 해당 스크립트를 작동할 OS 입니다.
    permissions: 
      contents: read 
      packages: write

    steps:
    - name: Checkout 
      uses: actions/checkout@v3  # (5) 프로젝트 코드를 CheckOut합니다.    
      
    - name: Set up JDK 8 
      uses: actions/setup-java@v3 # (6) 
      with:
        java-version: '8' 
        distribution: 'temurin' 
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew # (7)
      shell: bash

    - name: Build with Gradle
      run: ./gradlew clean -x test build # (8)
      shell: bash

    - name: Make directory    
      run: mkdir -p before-deploy &&
           cp scripts/*.sh before-deploy/ &&
           cp appspec.yml before-deploy/ &&
           cp build/libs/*.jar before-deploy/ &&
           cd before-deploy && zip -r before-deploy * &&
           cd ../ && mkdir -p deploy &&
           mv before-deploy/before-deploy.zip deploy/bookproject-springboot2-webservice.zip
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1      #(13)
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY_SECRET }}
        aws-region: ap-northeast-2
        

    - name: Upload to AWS S3
      run: aws s3 cp --region ap-northeast-2 ./deploy/${{ env.PROJECT_NAME }}.zip s3://$S3_BUCKET_NAME/${{ env.PROJECT_NAME }}.zip

    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=${{ env.PROJECT_NAME }}.zip,bundleType=zip
